# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usbhid" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    {
      device = "/dev/disk/by-uuid/1d63e5c1-d172-4535-af04-1ae24ccfac3e";
      fsType = "ext4";
    };

  boot.initrd.luks.devices."luks-7f677452-4e6d-41fb-8c2c-e43a711ab766".device = "/dev/disk/by-uuid/7f677452-4e6d-41fb-8c2c-e43a711ab766";

  fileSystems."/boot/efi" =
    {
      device = "/dev/disk/by-uuid/2B82-6540";
      fsType = "vfat";
    };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-32176e585b84.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-35c8b7e536bf.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-7fdb69a286e4.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-da93f7b8017f.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-ff998d1fa7eb.useDHCP = lib.mkDefault true;
  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp6s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
